# Default Properties file for use by StdSchedulerFactory
# to create a Quartz Scheduler Instance, if a different
# properties file is not explicitly specified.
#

org.quartz.scheduler.instanceName: DefaultQuartzScheduler
org.quartz.scheduler.instanceId: AUTO
org.quartz.scheduler.rmi.export: false
org.quartz.scheduler.rmi.proxy: false
org.quartz.scheduler.wrapJobExecutionInUserTransaction: false

# 调度采用线程池方式实现，避免单线程因阻塞而引起任务调度延迟。
org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount: 50
org.quartz.threadPool.threadPriority: 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true

# misfile:错过了触发时间，来处理规则。
# 可能原因：
# 1.服务重启 2.调度线程被QuartzJobBean阻塞 3.线程被耗尽
# 4.某个任务启动了@DisallowConcurrentExecution,上次调度持续阻塞，下次调度被错过。


# 假设任务是从上午9点到下午17点

# Misfire规则：
# withMisfireHandlingInstructionDoNothing：不触发立即执行，等待下次调度

#――以错过的第一个频率时间立刻开始执行
#――重做错过的所有频率周期后
#――当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行
# 如果9点misfire了，在10:15系统恢复之后。9点，10点的misfire会马上执行
# withMisfireHandlingInstructionIgnoreMisfires：以错过的第一个频率时间立刻开始执行；

#――以当前时间为触发频率立刻触发一次执行
# ――然后按照Cron频率依次执行
# withMisfireHandlingInstructionFireAndProceed：以当前时间为触发频率立刻触发一次执行；
# 假设9点，10点的任务都misfire了，系统在10：15恢复后，只会执行一次misfire,
# 下次正点执行。

# XXL-JOB默认misfire规则为：withMisfireHandlingInstructionDoNothing
### 单位毫秒
org.quartz.jobStore.misfireThreshold: 60000
org.quartz.jobStore.maxMisfiresToHandleAtATime: 1

#org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore

# 基于Quartz的集群方案，数据库选用Mysql；
# 集群分布式并发环境中使用QUARTZ定时任务调度，会在各个节点会上报任务，存到数据库中。
# 执行时会从数据库中取出触发器来执行，如果触发器的名称和执行时间相同，则只有一个节点去执行此任务。
# for cluster
org.quartz.jobStore.tablePrefix: XXL_JOB_QRTZ_
org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX

# 默认是内存
# org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
org.quartz.jobStore.isClustered: true
org.quartz.jobStore.clusterCheckinInterval: 5000
